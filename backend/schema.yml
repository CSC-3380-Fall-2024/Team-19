openapi: 3.0.3
info:
  title: Suni
  version: 1.0.0
paths:
  /activity/add:
    post:
      operationId: activity_add_create
      tags:
      - activity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activity'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Activity'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Activity'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
          description: ''
  /activity/delete/{id}:
    get:
      operationId: activity_delete_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - activity
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
          description: ''
    delete:
      operationId: activity_delete_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - activity
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /activity/list:
    get:
      operationId: activity_list_list
      tags:
      - activity
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Activity'
          description: ''
  /auth/admin/register/:
    post:
      operationId: auth_admin_register_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /auth/business/register/:
    post:
      operationId: auth_business_register_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Business'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Business'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Business'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
          description: ''
  /auth/customer/register/:
    post:
      operationId: auth_customer_register_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Customer'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Customer'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
          description: ''
  /auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /business/list/:
    get:
      operationId: business_list_list
      tags:
      - business
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Business'
          description: ''
  /customer/profile/{id}:
    get:
      operationId: customer_profile_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - customer
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
          description: ''
  /itinerary/{uuid}:
    get:
      operationId: itinerary_retrieve
      parameters:
      - in: path
        name: uuid
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - itinerary
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Itinerary'
          description: ''
  /itinerary/create:
    post:
      operationId: itinerary_create_create
      tags:
      - itinerary
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Itinerary'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Itinerary'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Itinerary'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Itinerary'
          description: ''
components:
  schemas:
    Activity:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        activity_name:
          type: string
          maxLength: 100
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,3}(?:\.\d{0,2})?$
        outdoors:
          type: boolean
        category:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/CategoryEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        image:
          type: string
          format: uri
          nullable: true
        business:
          type: integer
      required:
      - activity_name
      - business
      - description
      - id
      - price
    BlankEnum:
      enum:
      - ''
    Business:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          $ref: '#/components/schemas/User'
        activities:
          type: array
          items:
            $ref: '#/components/schemas/Activity'
          readOnly: true
        business_name:
          type: string
          maxLength: 255
        business_description:
          type: string
        business_phone_number:
          type: string
          maxLength: 15
        address:
          type: string
          maxLength: 255
        website_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        logo:
          type: string
          format: uri
          nullable: true
      required:
      - activities
      - address
      - business_description
      - business_name
      - business_phone_number
      - id
      - user
    CategoryEnum:
      enum:
      - Adventure
      - Relaxation
      - Dining
      - Culture
      type: string
      description: |-
        * `Adventure` - Adventure
        * `Relaxation` - Relaxation
        * `Dining` - Dining
        * `Culture` - Culture
    Customer:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          $ref: '#/components/schemas/User'
        itineraries:
          type: array
          items:
            $ref: '#/components/schemas/Itinerary'
          readOnly: true
        preferences:
          nullable: true
      required:
      - id
      - itineraries
      - user
    Day:
      type: object
      properties:
        date:
          type: string
          format: date
        activities:
          type: array
          items:
            $ref: '#/components/schemas/DayActivity'
          readOnly: true
      required:
      - activities
      - date
    DayActivity:
      type: object
      properties:
        activity:
          allOf:
          - $ref: '#/components/schemas/Activity'
          readOnly: true
        start_time:
          type: string
          format: time
        end_time:
          type: string
          format: time
      required:
      - activity
      - end_time
      - start_time
    Itinerary:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        destination:
          type: string
          maxLength: 255
        created_at:
          type: string
          format: date-time
          readOnly: true
        days:
          type: array
          items:
            $ref: '#/components/schemas/Day'
          readOnly: true
      required:
      - created_at
      - days
      - destination
      - end_date
      - start_date
      - title
    NullEnum:
      enum:
      - null
    RoleEnum:
      enum:
      - ADMIN
      - CUSTOMER
      - BUSINESS
      type: string
      description: |-
        * `ADMIN` - Admin
        * `CUSTOMER` - Customer
        * `BUSINESS` - Business
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        role:
          allOf:
          - $ref: '#/components/schemas/RoleEnum'
          readOnly: true
        password:
          type: string
          writeOnly: true
          maxLength: 128
      required:
      - password
      - role
      - username
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
